# 1 "pfx/pfxLexer.mll"
 
  open PfxParser

  let mk_int nb loc =
    try INT (int_of_string nb)
    with Failure _ -> raise (Location.Error(Printf.sprintf "Illegal integer '%s': " nb,loc))

# 10 "pfx/pfxLexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\241\255\000\000\000\000\002\000\000\000\001\000\002\000\
    \010\000\001\000\253\255\006\000\255\255\001\000\006\000\004\000\
    \006\000\000\000\250\255\249\255\000\000\002\000\010\000\248\255\
    \245\255\005\000\247\255\003\000\246\255\000\000\244\255\001\000\
    \242\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\014\000\014\000\014\000\014\000\014\000\014\000\
    \004\000\014\000\255\255\001\000\255\255\000\000\003\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255";
  Lexing.lex_default =
   "\001\000\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\255\255\000\000\255\255\014\000\255\255\
    \255\255\255\255\000\000\000\000\255\255\255\255\255\255\000\000\
    \000\000\255\255\000\000\255\255\000\000\255\255\000\000\255\255\
    \000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\011\000\012\000\012\000\011\000\013\000\011\000\011\000\
    \255\255\000\000\011\000\255\255\011\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \011\000\000\000\000\000\000\000\000\000\000\000\011\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\009\000\014\000\000\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\004\000\024\000\022\000\005\000\031\000\027\000\028\000\
    \018\000\025\000\000\000\000\000\030\000\003\000\032\000\000\000\
    \007\000\015\000\002\000\006\000\019\000\029\000\020\000\016\000\
    \021\000\017\000\023\000\026\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \010\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\013\000\000\000\000\000\000\000\011\000\
    \014\000\255\255\011\000\014\000\011\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\011\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\009\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\020\000\021\000\000\000\002\000\004\000\027\000\
    \017\000\005\000\255\255\255\255\029\000\000\000\031\000\255\255\
    \000\000\007\000\000\000\000\000\015\000\003\000\006\000\007\000\
    \006\000\016\000\022\000\025\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\014\000\255\255\
    \255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 17 "pfx/pfxLexer.mll"
            ( Location.incr_line lexbuf; token lexbuf )
# 121 "pfx/pfxLexer.ml"

  | 1 ->
# 19 "pfx/pfxLexer.mll"
            ( token lexbuf )
# 126 "pfx/pfxLexer.ml"

  | 2 ->
# 21 "pfx/pfxLexer.mll"
             ( EOF )
# 131 "pfx/pfxLexer.ml"

  | 3 ->
# 23 "pfx/pfxLexer.mll"
                            ( token lexbuf )
# 136 "pfx/pfxLexer.ml"

  | 4 ->
let
# 25 "pfx/pfxLexer.mll"
               nb
# 142 "pfx/pfxLexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 25 "pfx/pfxLexer.mll"
                            ( mk_int nb (Location.curr lexbuf))
# 146 "pfx/pfxLexer.ml"

  | 5 ->
# 28 "pfx/pfxLexer.mll"
                ( PUSH )
# 151 "pfx/pfxLexer.ml"

  | 6 ->
# 29 "pfx/pfxLexer.mll"
                ( POP )
# 156 "pfx/pfxLexer.ml"

  | 7 ->
# 30 "pfx/pfxLexer.mll"
                ( SWAP )
# 161 "pfx/pfxLexer.ml"

  | 8 ->
# 31 "pfx/pfxLexer.mll"
                ( DIV )
# 166 "pfx/pfxLexer.ml"

  | 9 ->
# 32 "pfx/pfxLexer.mll"
                ( ADD )
# 171 "pfx/pfxLexer.ml"

  | 10 ->
# 33 "pfx/pfxLexer.mll"
                ( SUB )
# 176 "pfx/pfxLexer.ml"

  | 11 ->
# 34 "pfx/pfxLexer.mll"
           ( MUL )
# 181 "pfx/pfxLexer.ml"

  | 12 ->
# 35 "pfx/pfxLexer.mll"
           ( DIV )
# 186 "pfx/pfxLexer.ml"

  | 13 ->
# 36 "pfx/pfxLexer.mll"
           ( REM )
# 191 "pfx/pfxLexer.ml"

  | 14 ->
let
# 39 "pfx/pfxLexer.mll"
         c
# 197 "pfx/pfxLexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 39 "pfx/pfxLexer.mll"
            (
      	raise (Location.Error(Printf.sprintf "Illegal character '%c': " c ^"and the location is at "^Location.string_of (Location.curr lexbuf),Location.curr lexbuf));
    )
# 203 "pfx/pfxLexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

;;

